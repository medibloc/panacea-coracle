// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validate_data.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DataValidationCertificate defines data validation certificate.
type DataValidationCertificate struct {
	UnsignedCert *UnsignedDataValidationCertificate `protobuf:"bytes,1,opt,name=unsigned_cert,json=unsignedCert,proto3" json:"unsigned_cert,omitempty"`
	Signature    []byte                             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DataValidationCertificate) Reset()         { *m = DataValidationCertificate{} }
func (m *DataValidationCertificate) String() string { return proto.CompactTextString(m) }
func (*DataValidationCertificate) ProtoMessage()    {}
func (*DataValidationCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_780c82132ab093de, []int{0}
}
func (m *DataValidationCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataValidationCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataValidationCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataValidationCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValidationCertificate.Merge(m, src)
}
func (m *DataValidationCertificate) XXX_Size() int {
	return m.Size()
}
func (m *DataValidationCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValidationCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_DataValidationCertificate proto.InternalMessageInfo

func (m *DataValidationCertificate) GetUnsignedCert() *UnsignedDataValidationCertificate {
	if m != nil {
		return m.UnsignedCert
	}
	return nil
}

func (m *DataValidationCertificate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// UnsignedDataValidationCertificate defines unsigned data validation certificate.
type UnsignedDataValidationCertificate struct {
	DealId               uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	DataHash             string `protobuf:"bytes,2,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	EncryptedDataUrl     string `protobuf:"bytes,3,opt,name=encrypted_data_url,json=encryptedDataUrl,proto3" json:"encrypted_data_url,omitempty"`
	DataValidatorAddress string `protobuf:"bytes,4,opt,name=data_validator_address,json=dataValidatorAddress,proto3" json:"data_validator_address,omitempty"`
	RequesterAddress     string `protobuf:"bytes,5,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
}

func (m *UnsignedDataValidationCertificate) Reset()         { *m = UnsignedDataValidationCertificate{} }
func (m *UnsignedDataValidationCertificate) String() string { return proto.CompactTextString(m) }
func (*UnsignedDataValidationCertificate) ProtoMessage()    {}
func (*UnsignedDataValidationCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_780c82132ab093de, []int{1}
}
func (m *UnsignedDataValidationCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedDataValidationCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedDataValidationCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsignedDataValidationCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedDataValidationCertificate.Merge(m, src)
}
func (m *UnsignedDataValidationCertificate) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedDataValidationCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedDataValidationCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedDataValidationCertificate proto.InternalMessageInfo

func (m *UnsignedDataValidationCertificate) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *UnsignedDataValidationCertificate) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *UnsignedDataValidationCertificate) GetEncryptedDataUrl() string {
	if m != nil {
		return m.EncryptedDataUrl
	}
	return ""
}

func (m *UnsignedDataValidationCertificate) GetDataValidatorAddress() string {
	if m != nil {
		return m.DataValidatorAddress
	}
	return ""
}

func (m *UnsignedDataValidationCertificate) GetRequesterAddress() string {
	if m != nil {
		return m.RequesterAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*DataValidationCertificate)(nil), "validate.DataValidationCertificate")
	proto.RegisterType((*UnsignedDataValidationCertificate)(nil), "validate.UnsignedDataValidationCertificate")
}

func init() { proto.RegisterFile("validate_data.proto", fileDescriptor_780c82132ab093de) }

var fileDescriptor_780c82132ab093de = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4d, 0x4f, 0x3a, 0x31,
	0x10, 0xc6, 0xe9, 0xff, 0x8f, 0x08, 0x15, 0x13, 0xad, 0x44, 0xd7, 0x97, 0x34, 0xc8, 0x89, 0x04,
	0x03, 0x89, 0xfa, 0x05, 0x7c, 0x39, 0xe8, 0x8d, 0x6c, 0x82, 0x07, 0x2f, 0xcd, 0x48, 0x47, 0x68,
	0xb2, 0xd9, 0x62, 0xdb, 0x35, 0xe1, 0x33, 0x78, 0xf1, 0x63, 0x79, 0xe4, 0xe8, 0xd1, 0xc0, 0xcd,
	0x4f, 0x61, 0xda, 0x05, 0xf6, 0x64, 0xbc, 0xed, 0x3c, 0xcf, 0x33, 0xbf, 0x99, 0xd9, 0xd2, 0xbd,
	0x57, 0x48, 0x94, 0x04, 0x87, 0x42, 0x82, 0x83, 0xee, 0xc4, 0x68, 0xa7, 0x59, 0x75, 0x25, 0x1e,
	0x35, 0x46, 0x7a, 0xa4, 0x83, 0xd8, 0xf3, 0x5f, 0xb9, 0xdf, 0x7a, 0x23, 0xf4, 0xf0, 0x16, 0x1c,
	0x3c, 0xe4, 0x31, 0xa5, 0xd3, 0x1b, 0x34, 0x4e, 0x3d, 0xab, 0x21, 0x38, 0x64, 0x7d, 0xba, 0x9d,
	0xa5, 0x56, 0x8d, 0x52, 0x94, 0x62, 0x88, 0xc6, 0x45, 0xa4, 0x49, 0xda, 0x5b, 0xe7, 0x9d, 0xee,
	0x8a, 0xda, 0x1d, 0x2c, 0xed, 0x5f, 0x19, 0x71, 0x7d, 0x45, 0xf0, 0x22, 0x3b, 0xa1, 0x35, 0x5f,
	0x81, 0xcb, 0x0c, 0x46, 0xff, 0x9a, 0xa4, 0x5d, 0x8f, 0x0b, 0xa1, 0xf5, 0x4d, 0xe8, 0xe9, 0x9f,
	0x44, 0x76, 0x40, 0x37, 0x25, 0x42, 0x22, 0x94, 0x0c, 0xfb, 0x94, 0xe3, 0x8a, 0x2f, 0xef, 0x25,
	0x3b, 0xa6, 0x35, 0x7f, 0xba, 0x18, 0x83, 0x1d, 0x07, 0x78, 0x2d, 0xae, 0x7a, 0xe1, 0x0e, 0xec,
	0x98, 0x9d, 0x51, 0x86, 0xe9, 0xd0, 0x4c, 0x27, 0x0e, 0x65, 0xf8, 0x43, 0x22, 0x33, 0x49, 0xf4,
	0x3f, 0xa4, 0x76, 0xd6, 0x8e, 0x9f, 0x3a, 0x30, 0x09, 0xbb, 0xa4, 0xfb, 0x21, 0xb3, 0x3c, 0x54,
	0x1b, 0x01, 0x52, 0x1a, 0xb4, 0x36, 0x2a, 0x87, 0x8e, 0x86, 0x2c, 0xd6, 0xd3, 0xe6, 0x2a, 0xf7,
	0x58, 0x87, 0xee, 0x1a, 0x7c, 0xc9, 0xd0, 0x3a, 0x2c, 0x1a, 0x36, 0xf2, 0x11, 0x6b, 0x63, 0x19,
	0xbe, 0x6e, 0x7d, 0xcc, 0x39, 0x99, 0xcd, 0x39, 0xf9, 0x9a, 0x73, 0xf2, 0xbe, 0xe0, 0xa5, 0xd9,
	0x82, 0x97, 0x3e, 0x17, 0xbc, 0xd4, 0x27, 0x8f, 0x95, 0x9e, 0x9b, 0x4e, 0xd0, 0x3e, 0x55, 0xc2,
	0x2b, 0x5d, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x63, 0x07, 0x83, 0x51, 0xdc, 0x01, 0x00, 0x00,
}

func (m *DataValidationCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataValidationCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataValidationCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintValidateData(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.UnsignedCert != nil {
		{
			size, err := m.UnsignedCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintValidateData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnsignedDataValidationCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedDataValidationCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsignedDataValidationCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintValidateData(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataValidatorAddress) > 0 {
		i -= len(m.DataValidatorAddress)
		copy(dAtA[i:], m.DataValidatorAddress)
		i = encodeVarintValidateData(dAtA, i, uint64(len(m.DataValidatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EncryptedDataUrl) > 0 {
		i -= len(m.EncryptedDataUrl)
		copy(dAtA[i:], m.EncryptedDataUrl)
		i = encodeVarintValidateData(dAtA, i, uint64(len(m.EncryptedDataUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintValidateData(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintValidateData(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidateData(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidateData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataValidationCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsignedCert != nil {
		l = m.UnsignedCert.Size()
		n += 1 + l + sovValidateData(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovValidateData(uint64(l))
	}
	return n
}

func (m *UnsignedDataValidationCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovValidateData(uint64(m.DealId))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovValidateData(uint64(l))
	}
	l = len(m.EncryptedDataUrl)
	if l > 0 {
		n += 1 + l + sovValidateData(uint64(l))
	}
	l = len(m.DataValidatorAddress)
	if l > 0 {
		n += 1 + l + sovValidateData(uint64(l))
	}
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovValidateData(uint64(l))
	}
	return n
}

func sovValidateData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidateData(x uint64) (n int) {
	return sovValidateData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataValidationCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidateData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataValidationCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataValidationCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsignedCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidateData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidateData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidateData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnsignedCert == nil {
				m.UnsignedCert = &UnsignedDataValidationCertificate{}
			}
			if err := m.UnsignedCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidateData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidateData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidateData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidateData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidateData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsignedDataValidationCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidateData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsignedDataValidationCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsignedDataValidationCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidateData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidateData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidateData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidateData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedDataUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidateData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidateData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidateData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedDataUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidateData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidateData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidateData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidateData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidateData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidateData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidateData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidateData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidateData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidateData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidateData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidateData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidateData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidateData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidateData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidateData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidateData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidateData = fmt.Errorf("proto: unexpected end of group")
)
